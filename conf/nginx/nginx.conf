
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    # use [ kqueue | rtsig | epoll | /dev/poll | select | poll ] ;
    #使用epoll的I/O 模型 Linux系统推荐采用epoll模型，FreeBSD系统推荐采用kqueue模型
    use epoll;
    # 允许连接数
    # 工作进程的最大连接数量，根据硬件调整，和前面工作进程配合起来用，尽量大，
    # 但是别把cpu跑到100%就行每个进程允许的最多连接数，
    # 理论上每台nginx服务器的最大连接数为worker_processes*worker_connections
    # 反向代理下 max clients = worker_processes * worker_connections/4
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    server_names_hash_bucket_size 128;
    # 设定请求缓冲
    client_header_buffer_size 512k;
    large_client_header_buffers 4 32k;
    #上传文件大小限制
    client_max_body_size 50m;

    # 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
    # 必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        off;
    # 此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用
    tcp_nopush     on;
    # 隐藏版本号 #
    server_tokens	off;

    # 连接超时时间。
    keepalive_timeout  65;

    #fastcgi连接超时时间
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 32k;
    fastcgi_buffers 64 32k;
    fastcgi_busy_buffers_size 64k;
    fastcgi_temp_file_write_size 256k;
    #转移4xx和5xx的错误返回给客户端，或允许Nginx的指令error_page回答。
    #fastcgi_intercept_errors on;

    # 开启gzip压缩
    gzip  on;
    gzip_min_length  1100;
    gzip_buffers     4 8k;
    gzip_types       text/plain application/x-javascript text/css application/xml;
    gzip_vary on;
    gzip_proxied     expired no-cache no-store private auth;
    # 禁用IE 6 gzip
    gzip_disable "MSIE [1-6]\.";

    include /etc/nginx/conf.d/*.conf;
}
