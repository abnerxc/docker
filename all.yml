version: '3'
networks:
  mynet:  #这里可以自定义名称 ，跟引用的地方一致就行
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/24

volumes:
  mongodb_data:
    driver: local

services:
  nginx:
    image: nginx:alpine
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./www/:/var/www/html/:rw
      - ./conf/nginx/conf.d:/etc/nginx/conf.d/:rw
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf:rw
      - ./log/nginx/:/var/log/nginx/:rw
    container_name: nginx
    privileged: true #解决不可以写宿主机目录权限问题，如果是centos7也可以关闭selinux
    environment:
      - TZ=Asia/Shanghai
    extra_hosts:
      - "ticket-dev.icsoc.net:127.0.0.1"  #容器绑定host
    networks:
      mynet:
        ipv4_address: 172.18.0.50

  redis:
    image: redis:alpine
    container_name: redis
    privileged: true
    ports:
      - "6379:6379"
    command: redis-server --requirepass 123456
    networks:
      mynet:
        ipv4_address: 172.18.0.100
    deploy: #容器限制资源用法
      resources:
        limits:
          cpus: '0.50'
          memory: 10M

  memcached:
    image: memcached:alpine
    container_name: memcached
    privileged: true
    ports:
      - "11211:11211"
    networks:
      mynet:
        ipv4_address: 172.18.0.101

  mysql:
    image: mysql:5.6.45
    container_name: mysql
    privileged: true
    ports:
      - "3306:3306"
    volumes:
      - ./conf/mysql/my.cnf:/etc/mysql/my.cnf
#      - ./data/mysql/:/var/lib/mysql/
      - ./data/mysql/:/usr/data/ #5.6.45
      - ./log/mysql/:/var/log/mysql/
    command: --innodb-flush-method=O_DSYNC --innodb-use-native-aio=0 --log_bin=ON #解决windows挂载无法启动
    environment:
       MYSQL_ROOT_PASSWORD: 123456
    networks:
      mynet:
        ipv4_address: 172.18.0.102

  mongodb:
    image: mongo
    container_name: mongodb
    privileged: true
    ports:
      - "27017:27017"
    volumes:   #win10 -v 方法挂载目前无解
      - mongodb_data:/data/db/
    command: --auth --bind_ip_all
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    networks:
      mynet:
        ipv4_address: 172.18.0.103

  elasticsearch:
    image: elasticsearch:5.6.12-alpine
    container_name: es
    privileged: true
    environment:
      - cluster.name=development
      - node.name=winner
      - bootstrap.memory_lock=false
      - discovery.zen.minimum_master_nodes=1
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"  # 宿主机执行 sudo sysctl -w vm.max_map_count=262144
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      mynet:
        ipv4_address: 172.18.0.104

  rabbitmq:
    image: rabbitmq:3.7.15-management-alpine
    container_name: rabbitmq
    privileged: true
    volumes:
      - ./data/rabbitmq/:/var/lib/rabbitmq  #数据存储目录
      - ./log/rabbitmq/:/var/log/rabbitmq #日志目录
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_DEFAULT_VHOST: 'vhost'
    ports:
      - "15672:15672"
      - "5672:5672"
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    networks:
      mynet:
        ipv4_address: 172.18.0.105

  kibana:
    image: kibana:5.6.12
    container_name: kibana
    privileged: true
    environment:
      - ELASTICSEARCH_URL=http://172.18.0.104:9200
    ports:
      - 5601:5601
    networks:
      std:
        ipv4_address: 172.18.0.106


  php82:
    image: registry.cn-guangzhou.aliyuncs.com/xuchen/php:8.2
    expose:
      - 9000
    volumes:
      - ./www/:/var/www/html/:rw
      - ./conf/php/php.ini:/usr/local/etc/php/php.ini
      - ./conf/php/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf
      - ./log/php-fpm/:/var/log/php-fpm/
    container_name: php82
    privileged: true
    extra_hosts:
      - "hddev.kerlala.com:172.18.0.50"
      - "jxjkhddev.kerlala.com:172.18.0.50"
      - "jxjkhdcrmdev.kerlala.com:172.18.0.50"
      - "mockdev.kerlala.com:172.18.0.50"
      - "casdev.kerlala.com:172.18.0.50"
    networks:
      jhm:
        ipv4_address: 172.18.0.82

  vuecli:
   image: registry.cn-guangzhou.aliyuncs.com/xuchen/node:1.0
   tty: true
   ports:
     - '8081:8081'
     - '4000:4000'
   volumes:
     - '/Users/abner/work/gopro/govue/front:/app/front'
     - '/Users/abner/work/blog:/app/blog'
     - '/Users/abner/.ssh:/root/.ssh'
   container_name: vuecli #node-dev
   networks:
     jhm:
       ipv4_address: 172.18.0.10

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      jhm:
        ipv4_address: 172.18.0.81

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0 # 每个容器就是一个 broker，设置其对应的 ID
      #外部网络只能获取到容器名称，在内外网络隔离情况下
      #通过名称是无法成功访问 kafka 的
      #因此需要通过绑定这个监听器能够让外部获取到的是 IP
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://172.18.0.92:9092
      #kafka启动后初始化一个有2个partition(分区)0个副本名叫kafeidou的topic
      KAFKA_CREATE_TOPICS: "kafeidou:2:0"
      #通过端口连接 zookeeper
      KAFKA_ZOOKEEPER_CONNECT: 172.18.0.81:2181
      # kafka 监听器，告诉外部连接者要通过什么协议访问指定主机名和端口开放的 Kafka 服务。
      KAFKA_LISTENERS: PLAINTEXT://172.18.0.92:9092
      # Kafka默认使用-Xmx1G -Xms1G的JVM内存配置，由于服务器小，调整下启动配置
      # 这个看自己的现状做调整，如果资源充足，可以不用配置这个
      KAFKA_HEAP_OPTS: "-Xmx256M -Xms128M"
      # 设置 kafka 日志位置
      KAFKA_LOG_DIRS: "/kafka/logs"
      # kafka 自动创建 topic，对于生成者与消费者连接的 TOPIC 不存在自动创建
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      # kafka 开启删除 topic，开了自动创建，删除的也要开，否则删除后还会自动创建
      KAFKA_DELETE_TOPIC_ENABLE: true
    volumes:
      - /data/kafka/docker.sock:/var/run/docker.sock
      # 挂载 kafka 日志
      - /log/kafka:/kafka/logs
    depends_on:
      - zookeeper
    networks:
      jhm:
        ipv4_address: 172.18.0.92
